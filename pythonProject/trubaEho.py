import logging
from datetime import datetime
import pytz
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import mysql.connector
from mysql.connector import Error
from apscheduler.schedulers.asyncio import AsyncIOScheduler
 # –î—Ä–∞–π–≤–µ—Ä MySQL –¥–ª—è Python
                 # –†–∞–±–æ—Ç–∞ —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': 'your_host',
    'user': 'your_user',
    'password': 'your_password',
    'database': 'your_database'
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = 'your_telegram_bot_token'
ADMIN_CHAT_ID = 'your_admin_chat_id'  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_date_start = State()
    waiting_for_date_end = State()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        return connection
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async def check_new_orders():
    connection = get_db_connection()
    if connection is None:
        return

    try:
        cursor = connection.cursor(dictionary=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º emergency_calls
        cursor.execute("""
            SELECT `id`, `phone`, `address`, `problem_description`, `call_time`, `status`, `notes` 
            FROM `emergency_calls` 
            WHERE `status` = 'new'
        """)
        emergency_calls = cursor.fetchall()

        for call in emergency_calls:
            message = (
                f"üìû –ù–æ–≤—ã–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤!\n"
                f"ID: {call['id']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {call['phone']}\n"
                f"–ê–¥—Ä–µ—Å: {call['address']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {call['problem_description']}\n"
                f"–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: {call['call_time']}\n"
                f"–ó–∞–º–µ—Ç–∫–∏: {call['notes']}"
            )
            await bot.send_message(ADMIN_CHAT_ID, message)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute("UPDATE `emergency_calls` SET `status` = 'notified' WHERE `id` = %s", (call['id'],))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º service_orders
        cursor.execute("""
            SELECT so.`id`, so.`client_name`, so.`phone`, so.`address`, 
                   so.`service_id`, s.`name` as service_name, 
                   so.`additional_info`, so.`order_date`, so.`status` 
            FROM `service_orders` so
            LEFT JOIN `services` s ON so.`service_id` = s.`id`
            WHERE so.`status` = 'new'
        """)
        service_orders = cursor.fetchall()

        for order in service_orders:
            message = (
                f"üõé –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —É—Å–ª—É–≥–∏!\n"
                f"ID: {order['id']}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                f"–ê–¥—Ä–µ—Å: {order['address']}\n"
                f"–£—Å–ª—É–≥–∞: {order['service_name']} (ID: {order['service_id']})\n"
                f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {order['additional_info']}\n"
                f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['order_date']}"
            )
            await bot.send_message(ADMIN_CHAT_ID, message)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute("UPDATE `service_orders` SET `status` = 'notified' WHERE `id` = %s", (order['id'],))

        connection.commit()
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    if str(message.from_user.id) == ADMIN_CHAT_ID:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", "–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
        keyboard.add(*buttons)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏!", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"
@dp.message_handler(lambda message: message.text == "–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")
async def show_new_orders(message: types.Message):
    if str(message.from_user.id) != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    connection = get_db_connection()
    if connection is None:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        cursor = connection.cursor(dictionary=True)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ emergency_calls
        cursor.execute("""
            SELECT `id`, `phone`, `address`, `problem_description`, `call_time`, `status`, `notes` 
            FROM `emergency_calls` 
            WHERE `status` IN ('new', 'notified')
            ORDER BY `call_time` DESC
        """)
        emergency_calls = cursor.fetchall()

        if not emergency_calls:
            await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.")
        else:
            for call in emergency_calls:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(
                    text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                    callback_data=f"emergency_work_{call['id']}"
                ))

                message_text = (
                    f"üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ (–°—Ç–∞—Ç—É—Å: {call['status']})\n"
                    f"ID: {call['id']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {call['phone']}\n"
                    f"–ê–¥—Ä–µ—Å: {call['address']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {call['problem_description']}\n"
                    f"–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: {call['call_time']}\n"
                    f"–ó–∞–º–µ—Ç–∫–∏: {call['notes']}"
                )
                await message.answer(message_text, reply_markup=keyboard)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ service_orders
        cursor.execute("""
            SELECT so.`id`, so.`client_name`, so.`phone`, so.`address`, 
                   so.`service_id`, s.`name` as service_name, 
                   so.`additional_info`, so.`order_date`, so.`status` 
            FROM `service_orders` so
            LEFT JOIN `services` s ON so.`service_id` = s.`id`
            WHERE so.`status` IN ('new', 'notified')
            ORDER BY so.`order_date` DESC
        """)
        service_orders = cursor.fetchall()

        if not service_orders:
            await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É—Å–ª—É–≥.")
        else:
            for order in service_orders:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(
                    text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                    callback_data=f"order_work_{order['id']}"
                ))

                message_text = (
                    f"üõé –ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ (–°—Ç–∞—Ç—É—Å: {order['status']})\n"
                    f"ID: {order['id']}\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                    f"–ê–¥—Ä–µ—Å: {order['address']}\n"
                    f"–£—Å–ª—É–≥–∞: {order['service_name']} (ID: {order['service_id']})\n"
                    f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {order['additional_info']}\n"
                    f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['order_date']}"
                )
                await message.answer(message_text, reply_markup=keyboard)

    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ"
@dp.message_handler(lambda message: message.text == "–ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ")
async def show_in_progress_orders(message: types.Message):
    if str(message.from_user.id) != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    connection = get_db_connection()
    if connection is None:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        cursor = connection.cursor(dictionary=True)

        # –ü–æ–ª—É—á–∞–µ–º emergency_calls –≤ —Ä–∞–±–æ—Ç–µ
        cursor.execute("""
            SELECT `id`, `phone`, `address`, `problem_description`, `call_time`, `status`, `notes` 
            FROM `emergency_calls` 
            WHERE `status` = 'in_progress'
            ORDER BY `call_time` DESC
        """)
        emergency_calls = cursor.fetchall()

        if not emergency_calls:
            await message.answer("–ù–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
        else:
            for call in emergency_calls:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(
                    text="–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=f"emergency_complete_{call['id']}"
                ))

                message_text = (
                    f"üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ (–í —Ä–∞–±–æ—Ç–µ)\n"
                    f"ID: {call['id']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {call['phone']}\n"
                    f"–ê–¥—Ä–µ—Å: {call['address']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {call['problem_description']}\n"
                    f"–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: {call['call_time']}\n"
                    f"–ó–∞–º–µ—Ç–∫–∏: {call['notes']}"
                )
                await message.answer(message_text, reply_markup=keyboard)

        # –ü–æ–ª—É—á–∞–µ–º service_orders –≤ —Ä–∞–±–æ—Ç–µ
        cursor.execute("""
            SELECT so.`id`, so.`client_name`, so.`phone`, so.`address`, 
                   so.`service_id`, s.`name` as service_name, 
                   so.`additional_info`, so.`order_date`, so.`status` 
            FROM `service_orders` so
            LEFT JOIN `services` s ON so.`service_id` = s.`id`
            WHERE so.`status` = 'in_progress'
            ORDER BY so.`order_date` DESC
        """)
        service_orders = cursor.fetchall()

        if not service_orders:
            await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —É—Å–ª—É–≥ –≤ —Ä–∞–±–æ—Ç–µ.")
        else:
            for order in service_orders:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(
                    text="–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                    callback_data=f"order_complete_{order['id']}"
                ))

                message_text = (
                    f"üõé –ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ (–í —Ä–∞–±–æ—Ç–µ)\n"
                    f"ID: {order['id']}\n"
                    f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                    f"–ê–¥—Ä–µ—Å: {order['address']}\n"
                    f"–£—Å–ª—É–≥–∞: {order['service_name']} (ID: {order['service_id']})\n"
                    f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {order['additional_info']}\n"
                    f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['order_date']}"
                )
                await message.answer(message_text, reply_markup=keyboard)

    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
@dp.message_handler(lambda message: message.text == "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def ask_for_completed_orders_period(message: types.Message):
    if str(message.from_user.id) != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    await OrderStates.waiting_for_date_start.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
@dp.message_handler(state=OrderStates.waiting_for_date_start)
async def process_date_start(message: types.Message, state: FSMContext):
    try:
        date_start = datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(date_start=date_start)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        await OrderStates.waiting_for_date_end.set()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
@dp.message_handler(state=OrderStates.waiting_for_date_end)
async def process_date_end_and_show_orders(message: types.Message, state: FSMContext):
    try:
        date_end = datetime.strptime(message.text, "%Y-%m-%d")
        data = await state.get_data()
        date_start = data['date_start']

        if date_start > date_end:
            await message.answer("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.finish()
            return

        connection = get_db_connection()
        if connection is None:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            await state.finish()
            return

        try:
            cursor = connection.cursor(dictionary=True)

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ emergency_calls
            cursor.execute("""
                SELECT `id`, `phone`, `address`, `problem_description`, `call_time`, `status`, `notes` 
                FROM `emergency_calls` 
                WHERE `status` = 'completed' 
                AND DATE(`call_time`) BETWEEN %s AND %s
                ORDER BY `call_time` DESC
            """, (date_start.date(), date_end.date()))
            emergency_calls = cursor.fetchall()

            if not emergency_calls:
                await message.answer("–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            else:
                await message.answer(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Å {date_start.date()} –ø–æ {date_end.date()}:")
                for call in emergency_calls:
                    message_text = (
                        f"üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ (–ó–∞–≤–µ—Ä—à–µ–Ω)\n"
                        f"ID: {call['id']}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {call['phone']}\n"
                        f"–ê–¥—Ä–µ—Å: {call['address']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {call['problem_description']}\n"
                        f"–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: {call['call_time']}\n"
                        f"–ó–∞–º–µ—Ç–∫–∏: {call['notes']}"
                    )
                    await message.answer(message_text)

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ service_orders
            cursor.execute("""
                SELECT so.`id`, so.`client_name`, so.`phone`, so.`address`, 
                       so.`service_id`, s.`name` as service_name, 
                       so.`additional_info`, so.`order_date`, so.`status` 
                FROM `service_orders` so
                LEFT JOIN `services` s ON so.`service_id` = s.`id`
                WHERE so.`status` = 'completed'
                AND DATE(so.`order_date`) BETWEEN %s AND %s
                ORDER BY so.`order_date` DESC
            """, (date_start.date(), date_end.date()))
            service_orders = cursor.fetchall()

            if not service_orders:
                await message.answer("–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É—Å–ª—É–≥ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            else:
                await message.answer(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É—Å–ª—É–≥ —Å {date_start.date()} –ø–æ {date_end.date()}:")
                for order in service_orders:
                    message_text = (
                        f"üõé –ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ (–ó–∞–≤–µ—Ä—à–µ–Ω)\n"
                        f"ID: {order['id']}\n"
                        f"–ö–ª–∏–µ–Ω—Ç: {order['client_name']}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
                        f"–ê–¥—Ä–µ—Å: {order['address']}\n"
                        f"–£—Å–ª—É–≥–∞: {order['service_name']} (ID: {order['service_id']})\n"
                        f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {order['additional_info']}\n"
                        f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['order_date']}"
                    )
                    await message.answer(message_text)

        except Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

        await state.finish()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É emergency_call
@dp.callback_query_handler(lambda c: c.data.startswith('emergency_work_'))
async def process_emergency_work(callback_query: types.CallbackQuery):
    if str(callback_query.from_user.id) != ADMIN_CHAT_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    call_id = callback_query.data.split('_')[2]
    connection = get_db_connection()
    if connection is None:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        cursor = connection.cursor()
        cursor.execute("""
            UPDATE `emergency_calls` 
            SET `status` = 'in_progress' 
            WHERE `id` = %s AND `status` IN ('new', 'notified')
        """, (call_id,))

        if cursor.rowcount == 0:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        else:
            connection.commit()
            await callback_query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –í —Ä–∞–±–æ—Ç–µ")
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=None
            )
            await bot.send_message(
                callback_query.message.chat.id,
                f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ ID {call_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É."
            )
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ emergency_call: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è emergency_call
@dp.callback_query_handler(lambda c: c.data.startswith('emergency_complete_'))
async def process_emergency_complete(callback_query: types.CallbackQuery):
    if str(callback_query.from_user.id) != ADMIN_CHAT_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    call_id = callback_query.data.split('_')[2]
    connection = get_db_connection()
    if connection is None:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        cursor = connection.cursor()
        cursor.execute("""
            UPDATE `emergency_calls` 
            SET `status` = 'completed' 
            WHERE `id` = %s AND `status` = 'in_progress'
        """, (call_id,))

        if cursor.rowcount == 0:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        else:
            connection.commit()
            await callback_query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –ó–∞–≤–µ—Ä—à–µ–Ω")
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=None
            )
            await bot.send_message(
                callback_query.message.chat.id,
                f"–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ ID {call_id} –∑–∞–≤–µ—Ä—à–µ–Ω."
            )
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ emergency_call: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤–∑—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É service_order
@dp.callback_query_handler(lambda c: c.data.startswith('order_work_'))
async def process_order_work(callback_query: types.CallbackQuery):
    if str(callback_query.from_user.id) != ADMIN_CHAT_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    order_id = callback_query.data.split('_')[2]
    connection = get_db_connection()
    if connection is None:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        cursor = connection.cursor()
        cursor.execute("""
            UPDATE `service_orders` 
            SET `status` = 'in_progress' 
            WHERE `id` = %s AND `status` IN ('new', 'notified')
        """, (order_id,))

        if cursor.rowcount == 0:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        else:
            connection.commit()
            await callback_query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –í —Ä–∞–±–æ—Ç–µ")
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=None
            )
            await bot.send_message(
                callback_query.message.chat.id,
                f"–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ ID {order_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É."
            )
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ service_order: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è service_order
@dp.callback_query_handler(lambda c: c.data.startswith('order_complete_'))
async def process_order_complete(callback_query: types.CallbackQuery):
    if str(callback_query.from_user.id) != ADMIN_CHAT_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    order_id = callback_query.data.split('_')[2]
    connection = get_db_connection()
    if connection is None:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        cursor = connection.cursor()
        cursor.execute("""
            UPDATE `service_orders` 
            SET `status` = 'completed' 
            WHERE `id` = %s AND `status` = 'in_progress'
        """, (order_id,))

        if cursor.rowcount == 0:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        else:
            connection.commit()
            await callback_query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –ó–∞–≤–µ—Ä—à–µ–Ω")
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=None
            )
            await bot.send_message(
                callback_query.message.chat.id,
                f"–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ ID {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω."
            )
    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ service_order: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message_handler(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    if str(message.from_user.id) != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    connection = get_db_connection()
    if connection is None:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        cursor = connection.cursor(dictionary=True)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ emergency_calls
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN `status` = 'new' THEN 1 ELSE 0 END) as new,
                SUM(CASE WHEN `status` = 'notified' THEN 1 ELSE 0 END) as notified,
                SUM(CASE WHEN `status` = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                SUM(CASE WHEN `status` = 'completed' THEN 1 ELSE 0 END) as completed
            FROM `emergency_calls`
        """)
        emergency_stats = cursor.fetchone()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ service_orders
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN `status` = 'new' THEN 1 ELSE 0 END) as new,
                SUM(CASE WHEN `status` = 'notified' THEN 1 ELSE 0 END) as notified,
                SUM(CASE WHEN `status` = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                SUM(CASE WHEN `status` = 'completed' THEN 1 ELSE 0 END) as completed
            FROM `service_orders`
        """)
        order_stats = cursor.fetchone()

        message_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:\n\n"
            "üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã:\n"
            f"–í—Å–µ–≥–æ: {emergency_stats['total']}\n"
            f"–ù–æ–≤—ã—Ö: {emergency_stats['new']}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö: {emergency_stats['notified']}\n"
            f"–í —Ä–∞–±–æ—Ç–µ: {emergency_stats['in_progress']}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {emergency_stats['completed']}\n\n"
            "üõé –ó–∞–∫–∞–∑—ã —É—Å–ª—É–≥:\n"
            f"–í—Å–µ–≥–æ: {order_stats['total']}\n"
            f"–ù–æ–≤—ã—Ö: {order_stats['new']}\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö: {order_stats['notified']}\n"
            f"–í —Ä–∞–±–æ—Ç–µ: {order_stats['in_progress']}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {order_stats['completed']}"
        )

        await message.answer(message_text)

    except Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def on_startup(dp):
    scheduler.add_job(check_new_orders, 'interval', minutes=5)
    scheduler.start()


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
async def on_shutdown(dp):
    scheduler.shutdown()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)